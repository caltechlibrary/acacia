#!/usr/bin/env python3
'''
cleanup-messages removes processed messages from the messages table
and deletes message from the mailbox.
'''
import os
import sys

from acacia.settings import settings_example
from acacia.messages import EMailProcessor

from decouple import config

_db = config('DATABASE', 'acacia.db')

user = config('SUBMIT_EMAIL', 'demo@example.edu')

def usage(app_name, db_name, exit_code = None):
    '''Describe how cleanup-messages cli works'''
    print(f'''
USAGE: {app_name}

This program reads the "settings.ini" file in
the current directory, connects to the {db_name} database
and cleanups up the processed messages. 

A "settings.ini" file needs to exist in the same directory
as this program is executed in.

OPTIONS:

  -h, --help     this help page
  --dry-run      do a dry run but don't connect via SMTP

''')
    if exit_code != None:
        sys.exit(exit_code)

def apply(app_name, _db, args):
    dry_run = False
    for arg in args:
        if arg.startswith('-'):
            if arg.startswith('--dry-run'):
                if "=" in arg:
                    p = arg.split("=", 2)
                    if (len(p) == 2) and (p[1].lower() == 'true'): 
                        dry_run = True
                    elif (len(p) == 2) and (p[1].lower() == 'false'):
                        dry_run = False
                    else:
                        print(f'''Don't understand "{p[1]}" for --dry-run''')
                        sys.exit(1)
                else:
                    dry_run = True
            elif arg.startswith('-h') or arg.startswith('--help'):
                usage(app_name, _db, 0)
    mail_processor = EMailProcessor()
    # the request to the SMTP service
    if mail_processor.cleanup_mailbox(smtp_dry_run = dry_run):
        if dry_run:
            print(f'Mail messages retrieved for {user}')
        else:
            print(f'Mail messages retrieved for {user} and stored in {_db}')
        sys.exit(0)
    else:
        print(f'Something went wrong with {app_name}, failed to fetch mail')
        sys.exit(1)


if __name__ == '__main__':
    app_name = os.path.basename(sys.argv[0])
    if not os.path.exists('settings.ini'):
        print(f'ERROR: Missing settings.ini')
        settings_example()
        sys.exit(1)
    apply(app_name, _db, sys.argv[1:])

