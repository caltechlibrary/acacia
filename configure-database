#!/usr/bin/env python3
# ==========================================================================
# @file    configure-database
# @brief   Setup the SQLite3 database for acacia
# @created 2021-05-26
# @license Please see the file named LICENSE in the project directory
# @website https://github.com/caltechlibrary/acacia
# ==========================================================================

import os
import sys
from decouple import config

from acacia.settings import settings_example
from acacia.messages import setup_message_table
from acacia.doi import setup_doi_table

import pymysql

def usage(app_name, db_name, exit_code = None):
    '''describe how configure-database works'''
    print(f'''
USAGE: {app_name} [OPTIONS]

This program will created the necessary MySQL 8 database
and tables needed for Acacia.

OPTIONS

  -h, --help          this help message

  -d, --drop-database this drop the database and tables

EXAMPLES

  ./configure-database

''')
    if isinstance(exit_code, int):
        sys.exit(exit_code)

def open_db(host, port, user, password):
    return pymysql.connect(host = host, port = port, user = user, password = password) 

def apply(app_name, args):
    drop_database = False
    for arg in args:
        if arg.startswith('-'):
            if arg.startswith('-h') or arg.startswith('--help'):
                usage(app_name, db_name, 0)
            if arg.startswith('-d') or arg.startswith('--drop'):
                drop_database = True
    db_name = config('DATABASE_NAME', 'acacia')
    db_host = config('DATABASE_HOST', 'localhost:3306')
    db_user = config('DATABASE_USER', 'root')
    db_password = config('DATABASE_PASSWORD', '')
    if ':' in db_host:
        host, port = db_host.split(':', 2)
        if isinstance(port, str):
            port = int(port)
    else:
        host = db_host
        port = 3306
    db = open_db(host, port, db_user, db_password)
    if drop_database == True:
        print(f'Dropping {db_name} if it exists')
        db.cursor().execute(f'DROP DATABASE IF EXISTS {db_name}')
    print(f'Creating {db_name} if it does not exist')
    db.cursor().execute(f'CREATE DATABASE IF NOT EXISTS {db_name}')
    db.close()
    setup_message_table()
    setup_doi_table()
    print('-'*50)

if __name__ == '__main__':
    app_name = os.path.basename(sys.argv[0])
    if not os.path.exists('settings.ini'):
        print(f'ERROR: Missing settings.ini')
        settings_example()
        sys.exit(1)
    apply(app_name, sys.argv[1:])
    
