#!/usr/bin/env python3
'''
retrieve-metadata retrieves the previously saved unprocessed doi 
records updating the metadata field with content retrieved via
`doi2eprintxml`. Updates workflow status in the doi in MySQL 8
table for doi.
'''
import os
import sys
from datetime import datetime

from acacia.settings import settings_example
from acacia.doi import DOIProcessor
from acacia.eprints import EPrintsSSH

from decouple import config

_db = config('DATABASE', 'acacia.db')
ssh_host = config('EPRINT_SSH', None)
repo_id = config('EPRINT_REPO_ID', None)
eprints_ssh = EPrintsSSH(ssh_host, repo_id)


def usage(app_name, db_name, exit_code = None):
    '''Describe how process_email.py works'''
    print(f'''
USAGE: {app_name}

This program updates the metadata for unprocessed doi
records in the doi table of {db_name}.  It requires that
both the doi and message tables exist in {db_name} and
that the {db_name}. See configure-database if tables
do not already exist. Use get-messages if messages
need to be retrieved and message-to-doi to add any
unprocessed doi for processing with this program.

A "settings.ini" file needs to exist and be configured.
See example file and create it if necessary.

OPTIONS:

  -h, --help     this help page
  --dry-run      run process but don't update or 
                 save records

EXAMPLE

Retrieve the lates email submissions and make then
ready to review.

```
    ./get-messages
    ./messages-to-doi
    ./retrieve-metadata
```

You can now look at the web application for further
processing.

''')
    if exit_code != None:
        sys.exit(exit_code)

def apply(app_name, _db, args):
    dry_run = False
    for arg in args:
        if arg.startswith('-'):
            if arg.startswith('--dry-run'):
                if "=" in arg:
                    p = arg.split("=", 2)
                    if (len(p) == 2) and (p[1].lower() == 'true'): 
                        dry_run = True
                    elif (len(p) == 2) and (p[1].lower() == 'false'):
                        dry_run = False
                    else:
                        print(f'''Don't understand "{p[1]}" for --dry-run''')
                        exit(1)
                else:
                    dry_run = True
            elif arg.startswith('-h') or arg.startswith('--help'):
                usage(app_name, _db, 0)
    doi_processor = DOIProcessor()
    # the request to the SMTP service
    err_cnt = 0
    item_cnt = 0
    doi_cnt = 0
    records = doi_processor.get_unprocessed()
    if len(records) == 0:
        print(f'WARNING: not unprocessed messages found')
    else:
        for rec in records:
            now = datetime.now()
            if not rec.metadata:
                src, err = doi_processor.get_metadata(rec.doi, dry_run = dry_run)
                if err:
                    msg = f'ERROR get_metadata({rec.doi}) {now.isoformat()}: {err}'
                    print(msg)
                    if dry_run:
                        sys.exit(1)
                    else:
                        err_cnt += 1
                    rec.status = 'metadata_lookup_error'
                    rec.notes += msg + "\n"
                    rec.updated = now
                else:
                    rec.metadata = src
                    rec.status = 'ready'
                    rec.updated = now
                    doi_cnt += 1
            if not rec.eprint_id:
                src, err = eprints_ssh.get_eprint_id_by_doi(rec.doi)
                if err:
                    msg = f'ERROR get_eprint_id_by_doi({rec.doi}): {err}'
                    print(msg)
                    if dry_run:
                        sys.exit(1)
                    else:
                        err_cnt += 1
                else:
                    rec.repo_id = repo_id
                    rec.eprint_id = src
                rec.save()
            item_cnt += 1
    if dry_run:
        print(f'Dry run: no records saved.')
    print(f'{item_cnt} messages processed into {doi_cnt} retrievals')
    if err_cnt > 0:
        print(f'{err_cnt} errors in processing messages')
        sys.exit(1)

if __name__ == '__main__':
    app_name = os.path.basename(sys.argv[0])
    if not os.path.exists('settings.ini'):
        print(f'ERROR: Missing settings.ini')
        settings_example()
        sys.exit(1)
    apply(app_name, _db, sys.argv[1:])

