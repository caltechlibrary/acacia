#!/usr/bin/env python3
# ==========================================================================
# @file    people-manager
# @brief   Add users and roles for Acacia
# @created 2021-01-25
# @license Please see the file named LICENSE in the project directory
# @website https://github.com/caltechlibrary/acacia
# ==========================================================================

import sys
import os
from getpass import getpass
from hashlib import blake2b

from decouple import config
from peewee import SqliteDatabase
from acacia.people import PersonManager, setup_person_table

db_name = config('DATABASE_FILE', default='acacia.db')
htpasswd = config('HTPASSWD', default = None)
password_file = config('PASSWORD_FILE', default = None)

def usage(app_name, exit_code):
    print(f'''
USAGE: {app_name} VERB [KEY_VALUE_PAIRS]

{app_name} lets us manage the contents of {db_name}
supporting the acacia web service.

VERBS
Verbs are actions you can perform on a peron's account or
to show the version of the program or this help page.

    help       this help page.
    version    version of software
    setup      setup {db_name} for the fist time

    list       list users defined in {db_name}
    add        add a user to {db_name}
    update     set a value for user in {db_name}
    remove     remove user from {db_name}

Each account (person) has several fields associated with it.

    uname          their login name like "ml@example.edu"
    display_name   their human readable name, "Maxine L."
    role           their application role, e.g. "library", "patron"
    secret         if Apache Basic Auth is setup, their pass phrase

Setting a field is expressed with a key/value pair separate by
an equal sign (i.e. '='). There is no space between the key, the equal
sign and the value (which can be in quotes). If no value is provided
then you will be prompted to enter it. Pressing enter without setting
the value will clear any existing value in the field.

All verbs to manager accounts are add, update, remove and list.
Adding an account creates a new record in {db_name}. Updates
changes the values of fields in an existing account. Only the
fields specified get changed.  Remove deletes an account from
{db_name} and list lists all accounts. List will also list a
specific account if you provide the value for the field "uname".

EXAMPLES

Add an account "rsdoiel" with a "display_name",
"role".

   {app_name} add uname=rsdoiel display_name='R. S. Doiel' role=library

Update "rsdoiel" to include a password (you'll be prompted
for the password)..

   {app_name} update uname=rsdoiel secret=

List the accounts.

   {app_name} list

List "rsdoiel" account specifically.

   {app_name} list uname=rsdoiel

Remove "rsdoiel"

   {app_name} remove uname=rsdoiel

If you need to remove a value just use the `field_name=` notation. 
It'll prompt you for the value, press enter and the value will 
become an empty string. So removing my library role for "rsdoiel"
looks like

   {app_name} update uname=rsdoiel role=

Then putting it back

   {app_name} update uname=rsdoiel role=library

Fields: uname (manditory except for list), 
        display_name, role, and secret

''')
    sys.exit(exit_code)

if __name__ == '__main__':
    app_name = os.path.basename(sys.argv[0])
    if len(sys.argv) < 2:
        usage(app_name, 1)
    verb = sys.argv[1]    
    kv = {}
    for term in sys.argv[2:]:
        if "=" in term:
            parts = term.split("=", 2);
            key = parts[0].strip()
            value = parts[1].strip().strip("'").strip('"')
            if key:
                if (not value) and not (key == 'secret'):
                    value = input(f'''Enter {key}: ''')
                kv[key] = value
    pm = PersonManager(db_name, htpasswd, password_file)
    if verb == 'setup':
        setup_person_table(db_name)
    elif verb == 'list':
        pm.list_people(kv)
    elif verb == 'add':
        pm.add_people(kv)
    elif verb == 'update':
        pm.update_people(kv)
    elif verb == 'remove':
        pm.remove_people(kv)
    elif verb in [ 'h', 'help', '-h', '--help', '-help']:
        usage(app_name, 0)
    else:
        print(f'''ERROR: "{verb}" not understood''')
        sys.exit(1)
            

